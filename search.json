[{"title":"Hello World","url":"/2025/07/01/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\n\n Quick Start\n Create a new post\n$ hexo new &quot;My New Post&quot;\nMore info: Writing\n Run server\n$ hexo server\nMore info: Server\n Generate static files\n$ hexo generate\nMore info: Generating\n Deploy to remote sites\n$ hexo deploy\nMore info: Deployment\n","categories":["博客搭建"]},{"title":"Apollo r5.5.0 代码解读之规划模块--多项次曲线","url":"/2021/02/02/Apollo%20r5.5.0%20%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%AF%BB%E4%B9%8B%E8%A7%84%E5%88%92%E6%A8%A1%E5%9D%97--%E5%A4%9A%E9%A1%B9%E6%AC%A1%E6%9B%B2%E7%BA%BF/","content":" 多项次曲线\nApollo r5.5.0代码分析。\n\n 简介\n点到点的轨迹规划算法可以理解为在规划的时间TTT内，从已知起始点 θstart\\theta_{start}θstart​运动到末尾点θend\\theta_{end}θend​的方法。这里引入中间变量s(t)s(t)s(t)，它是时间的函数，定义域[0,T][0,T][0,T]，值域[0,1][0,1][0,1]，sss与θ\\thetaθ的关系见下面公式。这个公式不难理解，当s=0s=0s=0时，θ=θstart\\theta=\\theta_{start}θ=θstart​；当s=1s=1s=1时，θ=θend\\theta=\\theta_{end}θ=θend​。\nθ(s)=θstart+s(θend−θstart),s∈[0,1]s=s(t),t∈[0,T]\\begin{aligned}\n\\theta(s)&amp;=\\theta_{start}+s(\\theta_{end}-\\theta_{start}),s\\in[0,1] \\\\\ns&amp;=s(t),t\\in[0,T] \\\\\n\\end{aligned}\nθ(s)s​=θstart​+s(θend​−θstart​),s∈[0,1]=s(t),t∈[0,T]​\nθ\\thetaθ对ttt求导是速度，即：\n∂θ∂t=∂θ∂s⋅∂s∂t其中∂θ∂s=θend−θstart∂θ∂t=(θend−θstart)⋅∂s∂t\\begin{aligned}\n\\frac{\\partial\\theta}{\\partial t}&amp;= \\frac{\\partial\\theta}{\\partial s} \\cdot \\frac{\\partial s}{\\partial t} \\quad其中\\frac{\\partial\\theta}{\\partial s}=\\theta_{end} -\\theta_{start} \\\\\n\\frac{\\partial\\theta}{\\partial t}&amp;=(\\theta_{end} -\\theta_{start})\\cdot \\frac{\\partial s}{\\partial t} \\\\\n\\end{aligned}\n∂t∂θ​∂t∂θ​​=∂s∂θ​⋅∂t∂s​其中∂s∂θ​=θend​−θstart​=(θend​−θstart​)⋅∂t∂s​​\nθ\\thetaθ对ttt求二阶导是加速度，即\n∂2θ∂t2=∂(∂θ∂s)∂t⋅∂s∂t+∂θ∂s⋅∂2s∂t2其中∂(∂θ∂s)∂t=∂(θend−θstart)∂t=0∂2θ∂t2=(θend−θstart)⋅∂2s∂t2\\begin{aligned}\n\\frac{\\partial^2\\theta}{\\partial t^2}&amp;= \\frac{\\partial(\\frac{\\partial\\theta}{\\partial s})}{\\partial t} \\cdot \\frac{\\partial s}{\\partial t}+\\frac{\\partial\\theta}{\\partial s} \\cdot \\frac{\\partial^2 s}{\\partial t^2} \\quad其中\\frac{\\partial(\\frac{\\partial\\theta}{\\partial s})}{\\partial t}=\\frac{\\partial(\\theta_{end} -\\theta_{start})}{\\partial t}=0 \\\\\n\\frac{\\partial^2\\theta}{\\partial t^2}&amp;=(\\theta_{end} -\\theta_{start})\\cdot \\frac{\\partial^2 s}{\\partial t^2} \\\\\n\\end{aligned}\n∂t2∂2θ​∂t2∂2θ​​=∂t∂(∂s∂θ​)​⋅∂t∂s​+∂s∂θ​⋅∂t2∂2s​其中∂t∂(∂s∂θ​)​=∂t∂(θend​−θstart​)​=0=(θend​−θstart​)⋅∂t2∂2s​​\n由于θstart\\theta_{start}θstart​和θend\\theta_{end}θend​是已知的，所以速度和加速度随时间的变化取决与s=s(t),t∈[0,T]s=s(t),t\\in[0,T]s=s(t),t∈[0,T]。\n这里的s(t)s(t)s(t)有很多种方法，比较常见的是三次函数，五次函数，梯形函数，S曲线等。\n 三次曲线–&gt;cubic polynomial curve1d\nCubicPolynomialCurve1d::CubicPolynomialCurve1d(const double x0,                                               const double dx0,                                               const double ddx0,                                               const double x1,                                               const double param) &#123;  ComputeCoefficients(x0, dx0, ddx0, x1, param);  param_ = param;  start_condition_[0] = x0;  start_condition_[1] = dx0;  start_condition_[2] = ddx0;  end_condition_ = x1;&#125;\ns(t)=a0+a1t+a2t2+a3t3\\begin{aligned}\ns(t)=a_0 + a_1t + a_2t^2 + a_3t^3\n\\end{aligned}\ns(t)=a0​+a1​t+a2​t2+a3​t3​\n入参初始条件\ns(0)=a0=x0  ⟺  a0=x0s′(0)=a1=dx0  ⟺  a1=dx0s′′(0)=2a2=ddx0  ⟺  a2=ddx02s(T)=a0+a1T+a2T2+a3T3=x1  ⟺  a3=x1−x0−dx0T−ddx02T2T3\\begin{aligned}\ns(0) = a_0 = x_0 \\iff a_0 = x_0 \\\\ \ns&#x27;(0) = a_1 = dx_0 \\iff a_1 = dx_0 \\\\\ns&#x27;&#x27;(0) = 2a_2 = ddx_0 \\iff a_2 = \\frac{ddx_0}{2} \\\\\ns(T) = a_0 + a_1T + a_2T^2 + a_3T^3 = x_1 \\iff a_3 = \\frac{x_1 - x_0 - dx_0T - \\frac{ddx_0}{2}T^2}{T^3}\n\\end{aligned}\ns(0)=a0​=x0​⟺a0​=x0​s′(0)=a1​=dx0​⟺a1​=dx0​s′′(0)=2a2​=ddx0​⟺a2​=2ddx0​​s(T)=a0​+a1​T+a2​T2+a3​T3=x1​⟺a3​=T3x1​−x0​−dx0​T−2ddx0​​T2​​\nvoid CubicPolynomialCurve1d::ComputeCoefficients(const double x0,                                                 const double dx0,                                                 const double ddx0,                                                 const double x1,                                                 const double param) &#123;  DCHECK(param &gt; 0.0);  const double p2 = param * param;  const double p3 = param * p2;  coef_[0] = x0;  coef_[1] = dx0;  coef_[2] = 0.5 * ddx0;  coef_[3] = (x1 - x0 - dx0 * param - coef_[2] * p2) / p3;&#125;\n&lt;font color=green&gt;CubicPolynomialCurve1d::Evaluate()&lt;/font&gt;是计算几阶导数的值。\ndouble CubicPolynomialCurve1d::Evaluate(const std::uint32_t order,                                        const double p) const &#123;  switch (order) &#123;    case 0: &#123;      return ((coef_[3] * p + coef_[2]) * p + coef_[1]) * p + coef_[0];    &#125;    case 1: &#123;      return (3.0 * coef_[3] * p + 2.0 * coef_[2]) * p + coef_[1];    &#125;    case 2: &#123;      return 6.0 * coef_[3] * p + 2.0 * coef_[2];    &#125;    case 3: &#123;      return 6.0 * coef_[3];    &#125;    default:      return 0.0;  &#125;&#125;\n 四次曲线–&gt;quartic polynomial curve1d\nQuarticPolynomialCurve1d::QuarticPolynomialCurve1d(    const double x0, const double dx0, const double ddx0, const double dx1,    const double ddx1, const double param) &#123;  param_ = param;  start_condition_[0] = x0;  start_condition_[1] = dx0;  start_condition_[2] = ddx0;  end_condition_[0] = dx1;  end_condition_[1] = ddx1;  ComputeCoefficients(x0, dx0, ddx0, dx1, ddx1, param);&#125;\ns(t)=a0+a1t+a2t2+a3t3+a4t4\\begin{aligned}\ns(t)=a_0 + a_1t + a_2t^2 + a_3t^3 + a_4t^4\n\\end{aligned}\ns(t)=a0​+a1​t+a2​t2+a3​t3+a4​t4​\n 入参初始条件（一）: x0, dx0, ddx0, dx1, ddx1\ns(0)=a0=x0  ⟺  a0=x0s′(0)=a1=dx0  ⟺  a1=dx0s′′(0)=2a2=ddx0  ⟺  a2=ddx02\\begin{aligned}\ns(0) = a_0 = x_0 \\iff a_0 = x_0 \\\\ \ns&#x27;(0) = a_1 = dx_0 \\iff a_1 = dx_0 \\\\\ns&#x27;&#x27;(0) = 2a_2 = ddx_0 \\iff a_2 = \\frac{ddx_0}{2} \\\\\n\\end{aligned}\ns(0)=a0​=x0​⟺a0​=x0​s′(0)=a1​=dx0​⟺a1​=dx0​s′′(0)=2a2​=ddx0​⟺a2​=2ddx0​​​\ns′(T)=a1+2a2T+3a3T2+4a4T3=dx1(1)s&#x27;(T) = a_1 + 2a_2T + 3a_3T^2 + 4a_4T^3 = dx_1 \\tag 1\ns′(T)=a1​+2a2​T+3a3​T2+4a4​T3=dx1​(1)\ns′′(T)=2a2+6a3T+12a4T2=ddx1(2)s&#x27;&#x27;(T) = 2a_2 + 6a_3T + 12a_4T^2 = ddx_1 \\tag2\ns′′(T)=2a2​+6a3​T+12a4​T2=ddx1​(2)\n公式3*(1)-T*(2)得：\n3a1+6a2T+9a3T2+12a4T3=3dx12a2T+6a3T2+12a4T3=T∗ddx1  ⟺  3a1+4a2T+3a3T2=3dx1−T∗ddx1  ⟺  a3=3dx1−T∗ddx1−3a1−4a2T3T2  ⟺  a3=3dx1−T∗ddx1−3dx0−2ddx0T3T2  ⟺  a3=3(dx1−ddx0T−dx0)−T∗(ddx1−ddx0)3T2\\begin{aligned}\n3a_1 + 6a_2T + 9a_3T^2 +12a_4T^3 &amp; = 3dx_1 \\\\\n2a_2T + 6a_3T^2 + 12a_4T^3&amp; = T*ddx_1 \\\\\n\\iff 3a_1 + 4a_2T +3a_3T^2 &amp;= 3dx_1 - T*ddx_1 \\\\\n\\iff a_3 &amp; = \\frac{3dx_1 - T*ddx_1-3a_1-4a_2T}{3T^2} \\\\\n\\iff a_3 &amp; = \\frac{3dx_1 - T*ddx_1-3dx_0 -2ddx_0T}{3T^2} \\\\\n\\iff a_3 &amp; = \\frac{3(dx_1 - ddx_0T - dx_0) - T*(ddx_1 - ddx_0)}{3T^2} \n\\end{aligned}\n3a1​+6a2​T+9a3​T2+12a4​T32a2​T+6a3​T2+12a4​T3⟺3a1​+4a2​T+3a3​T2⟺a3​⟺a3​⟺a3​​=3dx1​=T∗ddx1​=3dx1​−T∗ddx1​=3T23dx1​−T∗ddx1​−3a1​−4a2​T​=3T23dx1​−T∗ddx1​−3dx0​−2ddx0​T​=3T23(dx1​−ddx0​T−dx0​)−T∗(ddx1​−ddx0​)​​\n公式2(1)-T(2)得：\n2a1+4a2T+6a3T2+8a4T3=2dx12a2T+6a3T2+12a4T3=T∗ddx1  ⟺  2a1+2a2T−4a4T3=2dx1−T∗ddx1  ⟺  a4=2a1+2a2T−2dx1+T∗ddx14T3  ⟺  a4=2dx0+ddx0T−2dx1+T∗ddx14T3  ⟺  a4=−2(dx1−ddx0T−dx0)+T∗(ddx1−ddx0)4T3\\begin{aligned}\n2a_1 + 4a_2T + 6a_3T^2 +8a_4T^3 &amp; = 2dx_1 \\\\\n2a_2T + 6a_3T^2 + 12a_4T^3&amp; = T*ddx_1 \\\\\n\\iff 2a_1 + 2a_2T - 4a_4T^3 &amp;= 2dx_1 - T*ddx_1 \\\\\n\\iff a_4 &amp; = \\frac{2a_1 + 2a_2T - 2dx_1 + T*ddx_1}{4T^3} \\\\\n\\iff a_4 &amp; = \\frac{2dx_0 + ddx_0T - 2dx_1 + T*ddx_1}{4T^3} \\\\\n\\iff a_4 &amp; = \\frac{-2(dx_1 - ddx_0T - dx_0) + T*(ddx_1 - ddx_0)}{4T^3} \n\\end{aligned}\n2a1​+4a2​T+6a3​T2+8a4​T32a2​T+6a3​T2+12a4​T3⟺2a1​+2a2​T−4a4​T3⟺a4​⟺a4​⟺a4​​=2dx1​=T∗ddx1​=2dx1​−T∗ddx1​=4T32a1​+2a2​T−2dx1​+T∗ddx1​​=4T32dx0​+ddx0​T−2dx1​+T∗ddx1​​=4T3−2(dx1​−ddx0​T−dx0​)+T∗(ddx1​−ddx0​)​​\nvoid QuarticPolynomialCurve1d::ComputeCoefficients(    const double x0, const double dx0, const double ddx0, const double dx1,    const double ddx1, const double p) &#123;  CHECK_GT(p, 0.0);  coef_[0] = x0;  coef_[1] = dx0;  coef_[2] = 0.5 * ddx0;  double b0 = dx1 - ddx0 * p - dx0;  double b1 = ddx1 - ddx0;  double p2 = p * p;  double p3 = p2 * p;  coef_[3] = (3 * b0 - b1 * p) / (3 * p2);  coef_[4] = (-2 * b0 + b1 * p) / (4 * p3);&#125;\n 入参初始条件（二）: x0, dx0, ddx0, x1, dx1\ns(0)=a0=x0  ⟺  a0=x0s′(0)=a1=dx0  ⟺  a1=dx0s′′(0)=2a2=ddx0  ⟺  a2=ddx02\\begin{aligned}\ns(0) = a_0 = x_0 \\iff a_0 = x_0 \\\\ \ns&#x27;(0) = a_1 = dx_0 \\iff a_1 = dx_0 \\\\\ns&#x27;&#x27;(0) = 2a_2 = ddx_0 \\iff a_2 = \\frac{ddx_0}{2} \\\\\n\\end{aligned}\ns(0)=a0​=x0​⟺a0​=x0​s′(0)=a1​=dx0​⟺a1​=dx0​s′′(0)=2a2​=ddx0​⟺a2​=2ddx0​​​\ns(T)=a0+a1T+a2T2+a3T3+a4T4=x1(3)s(T)=a_0 + a_1T + a_2T^2 + a_3T^3 + a_4T^4 = x_1 \\tag 3\ns(T)=a0​+a1​T+a2​T2+a3​T3+a4​T4=x1​(3)\ns′(T)=a1+2a2T+3a3T2+4a4T3=dx1(4)s&#x27;(T) =a_1 + 2a_2T + 3a_3T^2 + 4a_4T^3 = dx_1 \\tag 4\ns′(T)=a1​+2a2​T+3a3​T2+4a4​T3=dx1​(4)\n公式4*(3)-T(4)得：\n4a0+4a1T+4a2T2+4a3T3+4a4T4=4x1a1T+2a2T2+3a3T3+4a4T4=T∗dx1  ⟺  4a0+3a1T+2a2T2+a3T3=4x1−T∗dx1  ⟺  a3=4x1−T∗dx1−4a0−3a1T−2a2T2T3  ⟺  a3=4x1−T∗dx1−4x0−3dx0T−ddx0T2T3  ⟺  a3=4(x1−x0−dx0T−ddx02T2)−T∗(dx1−dx0−ddx0T)T3\\begin{aligned}\n4a_0 + 4a_1T + 4a_2T^2 + 4a_3T^3 + 4a_4T^4&amp; = 4x_1 \\\\\na_1T + 2a_2T^2 + 3a_3T^3 + 4a_4T^4&amp; = T*dx_1 \\\\\n\\iff 4a_0 + 3a_1T + 2a_2T^2 + a_3T^3 &amp;= 4x_1 - T*dx_1 \\\\\n\\iff a_3 &amp; = \\frac{4x_1 - T*dx_1-4a_0-3a_1T-2a_2T^2}{T^3} \\\\\n\\iff a_3 &amp; = \\frac{4x_1 - T*dx_1 - 4x_0 - 3dx_0T-ddx_0T^2}{T^3} \\\\\n\\iff a_3 &amp; = \\frac{4(x_1-x_0-dx_0T-\\frac{ddx_0}{2}T^2) - T*(dx_1-dx_0 - ddx_0T)}{T^3} \n\\end{aligned}\n4a0​+4a1​T+4a2​T2+4a3​T3+4a4​T4a1​T+2a2​T2+3a3​T3+4a4​T4⟺4a0​+3a1​T+2a2​T2+a3​T3⟺a3​⟺a3​⟺a3​​=4x1​=T∗dx1​=4x1​−T∗dx1​=T34x1​−T∗dx1​−4a0​−3a1​T−2a2​T2​=T34x1​−T∗dx1​−4x0​−3dx0​T−ddx0​T2​=T34(x1​−x0​−dx0​T−2ddx0​​T2)−T∗(dx1​−dx0​−ddx0​T)​​\n公式3*(3)-T(3)得：\n3a0+3a1T+3a2T2+3a3T3+3a4T4=3x1a1T+2a2T2+3a3T3+4a4T4=T∗dx1  ⟺  3a0+2a1T+a2T2−a4T4=3x1−T∗dx1  ⟺  a4=3a0+2a1T+a2T2−3x1+T∗dx1T4  ⟺  a4=3x0+2dx0T+ddx02T2−3x1+T∗dx1T4  ⟺  a4=T∗(dx1−dx0−ddx0T)−3(x1−x0−dx0T−ddx02T2)T4\\begin{aligned}\n3a_0 + 3a_1T + 3a_2T^2 + 3a_3T^3 + 3a_4T^4&amp; = 3x_1 \\\\\na_1T + 2a_2T^2 + 3a_3T^3 + 4a_4T^4&amp; = T*dx_1 \\\\\n\\iff 3a_0 + 2a_1T + a_2T^2 - a_4T^4 &amp;= 3x_1 - T*dx_1 \\\\\n\\iff a_4 &amp; = \\frac{3a_0 + 2a_1T + a_2T^2 - 3x_1 + T*dx_1}{T^4} \\\\\n\\iff a_4 &amp; = \\frac{3x_0 + 2dx_0T + \\frac{ddx_0}{2}T^2 - 3x_1 + T*dx_1}{T^4} \\\\\n\\iff a_4 &amp; = \\frac{T*(dx_1 - dx_0 - ddx_0T) - 3(x_1-x_0-dx_0T - \\frac{ddx_0}{2}T^2)}{T^4} \n\\end{aligned}\n3a0​+3a1​T+3a2​T2+3a3​T3+3a4​T4a1​T+2a2​T2+3a3​T3+4a4​T4⟺3a0​+2a1​T+a2​T2−a4​T4⟺a4​⟺a4​⟺a4​​=3x1​=T∗dx1​=3x1​−T∗dx1​=T43a0​+2a1​T+a2​T2−3x1​+T∗dx1​​=T43x0​+2dx0​T+2ddx0​​T2−3x1​+T∗dx1​​=T4T∗(dx1​−dx0​−ddx0​T)−3(x1​−x0​−dx0​T−2ddx0​​T2)​​\nQuarticPolynomialCurve1d&amp; QuarticPolynomialCurve1d::FitWithEndPointFirstOrder(    const double x0, const double dx0, const double ddx0, const double x1,    const double dx1, const double p) &#123;  CHECK_GT(p, 0.0);  param_ = p;  coef_[0] = x0;  coef_[1] = dx0;  coef_[2] = 0.5 * ddx0;  double p2 = p * p;  double p3 = p2 * p;  double p4 = p3 * p;  double b0 = x1 - coef_[0] - coef_[1] * p - coef_[2] * p2;  double b1 = dx1 - dx0 - ddx0 * p;  coef_[4] = (b1 * p - 3 * b0) / p4;  coef_[3] = (4 * b0 - b1 * p) / p3;  return *this;&#125;\n 入参初始条件（三）: x0, dx0, x1, dx1, ddx1\ns(0)=a0=x0  ⟺  a0=x0s′(0)=a1=dx0  ⟺  a1=dx0\\begin{aligned}\ns(0) = a_0 = x_0 \\iff a_0 = x_0 \\\\ \ns&#x27;(0) = a_1 = dx_0 \\iff a_1 = dx_0 \\\\\n\\end{aligned}\ns(0)=a0​=x0​⟺a0​=x0​s′(0)=a1​=dx0​⟺a1​=dx0​​\ns(T)=a0+a1T+a2T2+a3T3+a4T4=x1(5)s(T)=a_0 + a_1T + a_2T^2 + a_3T^3 + a_4T^4 = x_1 \\tag 5\ns(T)=a0​+a1​T+a2​T2+a3​T3+a4​T4=x1​(5)\ns′(T)=a1+2a2T+3a3T2+4a4T3=dx1(6)s&#x27;(T)=a_1 + 2a_2T + 3a_3T^2 + 4a_4T^3 = dx_1 \\tag 6\ns′(T)=a1​+2a2​T+3a3​T2+4a4​T3=dx1​(6)\ns′′(T)=2a2+6a3T+12a4T2=ddx1(7)s&#x27;&#x27;(T)=2a_2 + 6a_3T + 12a_4T^2 = ddx_1 \\tag 7\ns′′(T)=2a2​+6a3​T+12a4​T2=ddx1​(7)\n公式12*(5)-6*T*(6)+T*T*(7)得：\n12a0+12a1T+12a2T2+12a3T3+12a4T4=12x16a1T+12a2T2+18a3T3+24a4T4=6dx1T2a2T2+6a3T3+12a4T4=ddx1T2  ⟺  12a0+6a1T+2a2T2=12x1−6dx1T+ddx1T2  ⟺  a2=12x1−6dx1T+ddx1T2−12a0−6a1T2T2  ⟺  a2=12x1−6dx1T+ddx1T2−12x0−6dx0T2T2  ⟺  a2=0.5ddx1T2−3(dx1−dx0)T+6(x1−x0−dx0T)T2\\begin{aligned}\n12a_0 + 12a_1T + 12a_2T^2 + 12a_3T^3 + 12a_4T^4 &amp; = 12x_1 \\\\\n6a_1T + 12a_2T^2 + 18a_3T^3 + 24a_4T^4 &amp; = 6dx_1T \\\\\n2a_2T^2 + 6a_3T^3 + 12a_4T^4 &amp; = ddx_1T^2 \\\\\n\\iff 12a_0 + 6a_1T + 2a_2T^2 &amp; = 12x_1 - 6dx_1T + ddx_1T^2 \\\\\n\\iff a_2 &amp; = \\frac{12x_1 - 6dx_1T + ddx_1T^2 - 12a_0 -6a_1T}{2T^2} \\\\\n\\iff a_2 &amp; = \\frac{12x_1 - 6dx_1T + ddx_1T^2 - 12x_0 -6dx_0T}{2T^2} \\\\\n\\iff a_2 &amp; = \\frac{0.5ddx_1T^2 - 3(dx_1-dx_0)T + 6(x_1-x_0-dx_0T)}{T^2} \\\\\n\\end{aligned}\n12a0​+12a1​T+12a2​T2+12a3​T3+12a4​T46a1​T+12a2​T2+18a3​T3+24a4​T42a2​T2+6a3​T3+12a4​T4⟺12a0​+6a1​T+2a2​T2⟺a2​⟺a2​⟺a2​​=12x1​=6dx1​T=ddx1​T2=12x1​−6dx1​T+ddx1​T2=2T212x1​−6dx1​T+ddx1​T2−12a0​−6a1​T​=2T212x1​−6dx1​T+ddx1​T2−12x0​−6dx0​T​=T20.5ddx1​T2−3(dx1​−dx0​)T+6(x1​−x0​−dx0​T)​​\n公式8*(5)-5*T*(6)+T*T*(7)得：\n8a0+8a1T+8a2T2+8a3T3+8a4T4=8x15a1T+10a2T2+15a3T3+20a4T4=5dx1T2a2T2+6a3T3+12a4T4=ddx1T2  ⟺  8a0+3a1T−a3T3=8x1−5dx1T+ddx1T2  ⟺  a3=8a0+3a1T−8x1+5dx1T−ddx1T2T3  ⟺  a3=8x0+3dx0T−8x1+5dx1T−ddx1T2T3  ⟺  a3=−ddx1T2+5(dx1−dx0)T−8(x1−x0−dx0T)T3\\begin{aligned}\n8a_0 + 8a_1T + 8a_2T^2 + 8a_3T^3 + 8a_4T^4 &amp; = 8x_1 \\\\\n5a_1T + 10a_2T^2 + 15a_3T^3 + 20a_4T^4 &amp; = 5dx_1T \\\\\n2a_2T^2 + 6a_3T^3 + 12a_4T^4 &amp; = ddx_1T^2 \\\\\n\\iff 8a_0 + 3a_1T - a_3T^3 &amp; = 8x_1 - 5dx_1T + ddx_1T^2 \\\\\n\\iff a_3 &amp; = \\frac{8a_0 + 3a_1T - 8x_1 + 5dx_1T - ddx_1T^2}{T^3} \\\\\n\\iff a_3 &amp; = \\frac{8x_0 + 3dx_0T - 8x_1 + 5dx_1T - ddx_1T^2}{T^3} \\\\\n\\iff a_3 &amp; = \\frac{-ddx_1T^2 + 5(dx_1-dx_0)T - 8(x_1-x_0-dx_0T)}{T^3} \\\\\n\\end{aligned}\n8a0​+8a1​T+8a2​T2+8a3​T3+8a4​T45a1​T+10a2​T2+15a3​T3+20a4​T42a2​T2+6a3​T3+12a4​T4⟺8a0​+3a1​T−a3​T3⟺a3​⟺a3​⟺a3​​=8x1​=5dx1​T=ddx1​T2=8x1​−5dx1​T+ddx1​T2=T38a0​+3a1​T−8x1​+5dx1​T−ddx1​T2​=T38x0​+3dx0​T−8x1​+5dx1​T−ddx1​T2​=T3−ddx1​T2+5(dx1​−dx0​)T−8(x1​−x0​−dx0​T)​​\n公式6*(5)-4*T*(6)+T*T*(7)得：\n6a0+6a1T+6a2T2+6a3T3+6a4T4=6x14a1T+8a2T2+12a3T3+16a4T4=4dx1T2a2T2+6a3T3+12a4T4=ddx1T2  ⟺  6a0+2a1T+2a4T4=6x1−4dx1T+ddx1T2  ⟺  a3=3x1−2dx1T+0.5ddx1T2−3a0−a1TT4  ⟺  a3=3x1−2dx1T+0.5ddx1T2−3x0−dx0TT4  ⟺  a3=0.5ddx1T2−2(dx1−dx0)T+3(x1−x0−dx0T)T4\\begin{aligned}\n6a_0 + 6a_1T + 6a_2T^2 + 6a_3T^3 + 6a_4T^4 &amp; = 6x_1 \\\\\n4a_1T + 8a_2T^2 + 12a_3T^3 + 16a_4T^4 &amp; = 4dx_1T \\\\\n2a_2T^2 + 6a_3T^3 + 12a_4T^4 &amp; = ddx_1T^2 \\\\\n\\iff 6a_0 + 2a_1T + 2a_4T^4 &amp; = 6x_1 - 4dx_1T + ddx_1T^2 \\\\\n\\iff a_3 &amp; = \\frac{3x_1 - 2dx_1T + 0.5ddx_1T^2-3a_0 -a_1T}{T^4} \\\\\n\\iff a_3 &amp; = \\frac{3x_1 - 2dx_1T + 0.5ddx_1T^2-3x_0 -dx_0T}{T^4} \\\\\n\\iff a_3 &amp; = \\frac{0.5ddx_1T^2 - 2(dx_1-dx_0)T + 3(x_1-x_0-dx_0T)}{T^4} \\\\\n\\end{aligned}\n6a0​+6a1​T+6a2​T2+6a3​T3+6a4​T44a1​T+8a2​T2+12a3​T3+16a4​T42a2​T2+6a3​T3+12a4​T4⟺6a0​+2a1​T+2a4​T4⟺a3​⟺a3​⟺a3​​=6x1​=4dx1​T=ddx1​T2=6x1​−4dx1​T+ddx1​T2=T43x1​−2dx1​T+0.5ddx1​T2−3a0​−a1​T​=T43x1​−2dx1​T+0.5ddx1​T2−3x0​−dx0​T​=T40.5ddx1​T2−2(dx1​−dx0​)T+3(x1​−x0​−dx0​T)​​\nQuarticPolynomialCurve1d&amp; QuarticPolynomialCurve1d::FitWithEndPointSecondOrder(    const double x0, const double dx0, const double x1, const double dx1,    const double ddx1, const double p) &#123;  CHECK_GT(p, 0.0);  param_ = p;  coef_[0] = x0;  coef_[1] = dx0;  double p2 = p * p;  double p3 = p2 * p;  double p4 = p3 * p;  double b0 = x1 - coef_[0] - coef_[1] * p;  double b1 = dx1 - coef_[1];  double c1 = b1 * p;  double c2 = ddx1 * p2;  coef_[2] = (0.5 * c2 - 3 * c1 + 6 * b0) / p2;  coef_[3] = (-c2 + 5 * c1 - 8 * b0) / p3;  coef_[4] = (0.5 * c2 - 2 * c1 + 3 * b0) / p4;  return *this;&#125;\n&lt;font color=green&gt;CubicPolynomialCurve1d::Evaluate()&lt;/font&gt;是计算几阶导数的值。\ndouble QuarticPolynomialCurve1d::Evaluate(const std::uint32_t order,                                          const double p) const &#123;  switch (order) &#123;    case 0: &#123;      return (((coef_[4] * p + coef_[3]) * p + coef_[2]) * p + coef_[1]) * p +             coef_[0];    &#125;    case 1: &#123;      return ((4.0 * coef_[4] * p + 3.0 * coef_[3]) * p + 2.0 * coef_[2]) * p +             coef_[1];    &#125;    case 2: &#123;      return (12.0 * coef_[4] * p + 6.0 * coef_[3]) * p + 2.0 * coef_[2];    &#125;    case 3: &#123;      return 24.0 * coef_[4] * p + 6.0 * coef_[3];    &#125;    case 4: &#123;      return 24.0 * coef_[4];    &#125;    default:      return 0.0;  &#125;&#125;\n 五次曲线–&gt;quintic polynomial curve1d\nQuinticPolynomialCurve1d::QuinticPolynomialCurve1d(    const double x0, const double dx0, const double ddx0, const double x1,    const double dx1, const double ddx1, const double param) &#123;  ComputeCoefficients(x0, dx0, ddx0, x1, dx1, ddx1, param);  start_condition_[0] = x0;  start_condition_[1] = dx0;  start_condition_[2] = ddx0;  end_condition_[0] = x1;  end_condition_[1] = dx1;  end_condition_[2] = ddx1;  param_ = param;&#125;\ns(t)=a0+a1t+a2t2+a3t3+a4t4+a5t5s(t)=a_0 + a_1t + a_2t^2 + a_3t^3 + a_4t^4 + a_5t^5\ns(t)=a0​+a1​t+a2​t2+a3​t3+a4​t4+a5​t5\n{a0=x0a1=dx0a2=ddx02a3=0.5∗(20x1−0.5ddx0T2−dx0T−x0T3−8dx1−ddx0T−dx0T2+ddx1−ddx0T)a4=−15x1−0.5ddx0T2−dx0T−x0T3+7dx1−ddx0T−dx0T2−ddx1−ddx0TTa5=6x1−0.5ddx0T2−dx0T−x0T3−3dx1−ddx0T−dx0T2+0.5ddx1−ddx0TT2\\begin{cases}{}\na_0 = x_0 \\\\ \na_1 = dx_0 \\\\\na_2 = \\frac{ddx_0}{2} \\\\\na_3 = 0.5*(20\\frac{x_1-0.5ddx_0T^2-dx_0T-x_0}{T^3} -8\\frac{dx_1-ddx_0T-dx_0}{T^2} + \\frac{ddx_1-ddx_0}{T}) \\\\\na_4 =\\frac{-15\\frac{x_1-0.5ddx_0T^2-dx_0T-x_0}{T^3} + 7\\frac{dx_1-ddx_0T-dx_0}{T^2} - \\frac{ddx_1-ddx_0}{T}}{T} \\\\\na_5 =\\frac{6\\frac{x_1-0.5ddx_0T^2-dx_0T-x_0}{T^3} - 3\\frac{dx_1-ddx_0T-dx_0}{T^2} + 0.5\\frac{ddx_1-ddx_0}{T}}{T^2} \\\\\n\\end{cases}\n⎩⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎧​a0​=x0​a1​=dx0​a2​=2ddx0​​a3​=0.5∗(20T3x1​−0.5ddx0​T2−dx0​T−x0​​−8T2dx1​−ddx0​T−dx0​​+Tddx1​−ddx0​​)a4​=T−15T3x1​−0.5ddx0​T2−dx0​T−x0​​+7T2dx1​−ddx0​T−dx0​​−Tddx1​−ddx0​​​a5​=T26T3x1​−0.5ddx0​T2−dx0​T−x0​​−3T2dx1​−ddx0​T−dx0​​+0.5Tddx1​−ddx0​​​​\n入参初始条件\ns(0)=a0=x0  ⟺  a0=x0s′(0)=a1=dx0  ⟺  a1=dx0s′′(0)=2a2=ddx0  ⟺  a2=ddx02\\begin{aligned}\ns(0) = a_0 = x_0 \\iff a_0 = x_0 \\\\ \ns&#x27;(0) = a_1 = dx_0 \\iff a_1 = dx_0 \\\\\ns&#x27;&#x27;(0) = 2a_2 = ddx_0 \\iff a_2 = \\frac{ddx_0}{2} \\\\\n\\end{aligned}\ns(0)=a0​=x0​⟺a0​=x0​s′(0)=a1​=dx0​⟺a1​=dx0​s′′(0)=2a2​=ddx0​⟺a2​=2ddx0​​​\ns(T)=a0+a1T+a2T2+a3T3+a4T4+a5T5=x1(8)s(T) = a_0 + a_1T + a_2T^2 + a_3T^3 + a_4T^4 + a_5T^5 = x_1\\tag 8\ns(T)=a0​+a1​T+a2​T2+a3​T3+a4​T4+a5​T5=x1​(8)\ns′(T)=a1+2a2T+3a3T2+4a4T3+5a5T4=dx1(9)s&#x27;(T) = a_1 + 2a_2T + 3a_3T^2 + 4a_4T^3 + 5a_5T^4 = dx_1 \\tag 9\ns′(T)=a1​+2a2​T+3a3​T2+4a4​T3+5a5​T4=dx1​(9)\ns′′(T)=2a2+6a3T+12a4T2+20a5T3=ddx1(10)s&#x27;&#x27;(T) = 2a_2 + 6a_3T + 12a_4T^2 + 20a_5T^3 = ddx_1 \\tag{10}\ns′′(T)=2a2​+6a3​T+12a4​T2+20a5​T3=ddx1​(10)\n公式20*(8)-5*T*(9)+T*T*(10)得：\n20a0+20a1T+20a2T2+20a3T3+20a4T4+20a5T5=20x18a1T+16a2T2+24a3T3+32a4T4+40a5T5=8dx1T2a2T2+6a3T3+12a4T4+20a5T5=ddx1T2  ⟺  20a0+12a1T+6a2T2+2a3T3=20x1−8dx1T+ddx1T2  ⟺  a3=20x1−8dx1T+ddx1T2−20a0−12a1T−6a2T22T3  ⟺  a3=20x1−8dx1T+ddx1T2−20x0−12dx0T−3ddx0T22T3  ⟺  a3=0.5∗(20x1−0.5ddx0T2−dx0T−x0T3−8dx1−ddx0T−dx0T2+ddx1−ddx0T)\\begin{aligned}\n20a_0 + 20a_1T + 20a_2T^2 + 20a_3T^3 + 20a_4T^4 + 20a_5T^5 &amp; = 20x_1 \\\\\n8a_1T + 16a_2T^2 + 24a_3T^3 + 32a_4T^4 + 40a_5T^5 &amp; = 8dx_1T \\\\\n2a_2T^2 + 6a_3T^3 + 12a_4T^4 + 20a_5T^5&amp; = ddx_1T^2 \\\\\n\\iff 20a_0 + 12a_1T + 6a_2T^2 + 2a_3T^3&amp; = 20x_1 - 8dx_1T + ddx_1T^2 \\\\\n\\iff a_3 &amp; = \\frac{20x_1 - 8dx_1T + ddx_1T^2 - 20a_0 - 12a_1T - 6a_2T^2}{2T^3} \\\\\n\\iff a_3 &amp; = \\frac{20x_1 - 8dx_1T + ddx_1T^2 - 20x_0 - 12dx_0T - 3ddx_0T^2}{2T^3} \\\\\n\\iff a_3 &amp; = 0.5*(20\\frac{x_1-0.5ddx_0T^2-dx_0T-x_0}{T^3} -8\\frac{dx_1-ddx_0T-dx_0}{T^2} + \\frac{ddx_1-ddx_0}{T}) \\\\\n\\end{aligned}\n20a0​+20a1​T+20a2​T2+20a3​T3+20a4​T4+20a5​T58a1​T+16a2​T2+24a3​T3+32a4​T4+40a5​T52a2​T2+6a3​T3+12a4​T4+20a5​T5⟺20a0​+12a1​T+6a2​T2+2a3​T3⟺a3​⟺a3​⟺a3​​=20x1​=8dx1​T=ddx1​T2=20x1​−8dx1​T+ddx1​T2=2T320x1​−8dx1​T+ddx1​T2−20a0​−12a1​T−6a2​T2​=2T320x1​−8dx1​T+ddx1​T2−20x0​−12dx0​T−3ddx0​T2​=0.5∗(20T3x1​−0.5ddx0​T2−dx0​T−x0​​−8T2dx1​−ddx0​T−dx0​​+Tddx1​−ddx0​​)​\n提示：逆推一下得证。\n公式15*(8)-7*T*(9)+T*T*(10)得：\n15a0+15a1T+15a2T2+15a3T3+15a4T4+15a5T5=15x17a1T+14a2T2+21a3T3+28a4T4+35a5T5=7dx1T2a2T2+6a3T3+12a4T4+20a5T5=ddx1T2  ⟺  15a0+8a1T+3a2T2−a4T4=15x1−7dx1T+ddx1T2  ⟺  a4=15a0+8a1T+3a2T2−15x1+7dx1T−ddx1T2T4  ⟺  a4=15x0+8dx0T+3ddx02T2−15x1+7dx1T−ddx1T2T4  ⟺  a4=−15x1−0.5ddx0T2−dx0T−x0T3+7dx1−ddx0T−dx0T2−ddx1−ddx0TT\\begin{aligned}\n15a_0 + 15a_1T + 15a_2T^2 + 15a_3T^3 + 15a_4T^4 + 15a_5T^5 &amp; = 15x_1 \\\\\n7a_1T + 14a_2T^2 + 21a_3T^3 + 28a_4T^4 + 35a_5T^5 &amp; = 7dx_1T \\\\\n2a_2T^2 + 6a_3T^3 + 12a_4T^4 + 20a_5T^5&amp; = ddx_1T^2 \\\\\n\\iff 15a_0 + 8a_1T + 3a_2T^2 - a_4T^4&amp; = 15x_1 - 7dx_1T + ddx_1T^2 \\\\\n\\iff a_4 &amp; = \\frac{15a_0 + 8a_1T + 3a_2T^2 - 15x_1 + 7dx_1T - ddx_1T^2}{T^4} \\\\\n\\iff a_4 &amp; = \\frac{15x_0 + 8dx_0T + 3\\frac{ddx_0}{2}T^2 - 15x_1 + 7dx_1T - ddx_1T^2}{T^4} \\\\\n\\iff a_4 &amp; =\\frac{-15\\frac{x_1-0.5ddx_0T^2-dx_0T-x_0}{T^3} + 7\\frac{dx_1-ddx_0T-dx_0}{T^2} - \\frac{ddx_1-ddx_0}{T}}{T} \\\\\n\\end{aligned}\n15a0​+15a1​T+15a2​T2+15a3​T3+15a4​T4+15a5​T57a1​T+14a2​T2+21a3​T3+28a4​T4+35a5​T52a2​T2+6a3​T3+12a4​T4+20a5​T5⟺15a0​+8a1​T+3a2​T2−a4​T4⟺a4​⟺a4​⟺a4​​=15x1​=7dx1​T=ddx1​T2=15x1​−7dx1​T+ddx1​T2=T415a0​+8a1​T+3a2​T2−15x1​+7dx1​T−ddx1​T2​=T415x0​+8dx0​T+32ddx0​​T2−15x1​+7dx1​T−ddx1​T2​=T−15T3x1​−0.5ddx0​T2−dx0​T−x0​​+7T2dx1​−ddx0​T−dx0​​−Tddx1​−ddx0​​​​\n提示：逆推一下得证。\n公式12*(8)-6*T*(9)+T*T*(10)得：\n12a0+12a1T+12a2T2+12a3T3+12a4T4+12a5T5=12x16a1T+12a2T2+18a3T3+24a4T4+30a5T5=6dx1T2a2T2+6a3T3+12a4T4+20a5T5=ddx1T2  ⟺  12a0+6a1T+2a2T2+2a5T5=12x1−6dx1T+ddx1T2  ⟺  a5=12x1−6dx1T+ddx1T2−12a0−6a1T−2a2T22T5  ⟺  a5=12x1−6dx1T+ddx1T2−12x0−6dx0T−ddx0T22T5  ⟺  a5=6x1−0.5ddx0T2−dx0T−x0T3−3dx1−ddx0T−dx0T2+0.5ddx1−ddx0TT2\\begin{aligned}\n12a_0 + 12a_1T + 12a_2T^2 + 12a_3T^3 + 12a_4T^4 + 12a_5T^5 &amp; = 12x_1 \\\\\n6a_1T + 12a_2T^2 + 18a_3T^3 + 24a_4T^4 + 30a_5T^5 &amp; = 6dx_1T \\\\\n2a_2T^2 + 6a_3T^3 + 12a_4T^4 + 20a_5T^5&amp; = ddx_1T^2 \\\\\n\\iff 12a_0 + 6a_1T + 2a_2T^2 + 2a_5T^5&amp; = 12x_1 - 6dx_1T + ddx_1T^2 \\\\\n\\iff a_5 &amp; = \\frac{12x_1 - 6dx_1T + ddx_1T^2 - 12a_0 - 6a_1T - 2a_2T^2}{2T^5} \\\\\n\\iff a_5 &amp; = \\frac{12x_1 - 6dx_1T + ddx_1T^2 - 12x_0 - 6dx_0T - ddx_0T^2}{2T^5} \\\\\n\\iff a_5 &amp; =\\frac{6\\frac{x_1-0.5ddx_0T^2-dx_0T-x_0}{T^3} - 3\\frac{dx_1-ddx_0T-dx_0}{T^2} + 0.5\\frac{ddx_1-ddx_0}{T}}{T^2} \\\\\n\\end{aligned}\n12a0​+12a1​T+12a2​T2+12a3​T3+12a4​T4+12a5​T56a1​T+12a2​T2+18a3​T3+24a4​T4+30a5​T52a2​T2+6a3​T3+12a4​T4+20a5​T5⟺12a0​+6a1​T+2a2​T2+2a5​T5⟺a5​⟺a5​⟺a5​​=12x1​=6dx1​T=ddx1​T2=12x1​−6dx1​T+ddx1​T2=2T512x1​−6dx1​T+ddx1​T2−12a0​−6a1​T−2a2​T2​=2T512x1​−6dx1​T+ddx1​T2−12x0​−6dx0​T−ddx0​T2​=T26T3x1​−0.5ddx0​T2−dx0​T−x0​​−3T2dx1​−ddx0​T−dx0​​+0.5Tddx1​−ddx0​​​​\n提示：逆推一下得证。\nvoid QuinticPolynomialCurve1d::ComputeCoefficients(    const double x0, const double dx0, const double ddx0, const double x1,    const double dx1, const double ddx1, const double p) &#123;  CHECK_GT(p, 0.0);  coef_[0] = x0;  coef_[1] = dx0;  coef_[2] = ddx0 / 2.0;  const double p2 = p * p;  const double p3 = p * p2;  // the direct analytical method is at least 6 times faster than using matrix  // inversion.  const double c0 = (x1 - 0.5 * p2 * ddx0 - dx0 * p - x0) / p3;  const double c1 = (dx1 - ddx0 * p - dx0) / p2;  const double c2 = (ddx1 - ddx0) / p;  coef_[3] = 0.5 * (20.0 * c0 - 8.0 * c1 + c2);  coef_[4] = (-15.0 * c0 + 7.0 * c1 - c2) / p;  coef_[5] = (6.0 * c0 - 3.0 * c1 + 0.5 * c2) / p2;&#125;\n&lt;font color=green&gt;CubicPolynomialCurve1d::Evaluate()&lt;/font&gt;是计算几阶导数的值。\ndouble QuinticPolynomialCurve1d::Evaluate(const uint32_t order,                                          const double p) const &#123;  switch (order) &#123;    case 0: &#123;      return ((((coef_[5] * p + coef_[4]) * p + coef_[3]) * p + coef_[2]) * p +              coef_[1]) *                 p +             coef_[0];    &#125;    case 1: &#123;      return (((5.0 * coef_[5] * p + 4.0 * coef_[4]) * p + 3.0 * coef_[3]) * p +              2.0 * coef_[2]) *                 p +             coef_[1];    &#125;    case 2: &#123;      return (((20.0 * coef_[5] * p + 12.0 * coef_[4]) * p) + 6.0 * coef_[3]) *                 p +             2.0 * coef_[2];    &#125;    case 3: &#123;      return (60.0 * coef_[5] * p + 24.0 * coef_[4]) * p + 6.0 * coef_[3];    &#125;    case 4: &#123;      return 120.0 * coef_[5] * p + 24.0 * coef_[4];    &#125;    case 5: &#123;      return 120.0 * coef_[5];    &#125;    default:      return 0.0;  &#125;&#125;\n","categories":["Apollo源码解读"]},{"title":"数学测试","url":"/2025/07/03/test/","content":"这是行内公式测试：E=mc2E = mc^2E=mc2\n这是块级公式测试：\niℏ∂ψ∂t=−ℏ22m∇2ψ+Vψi\\hbar \\frac{\\partial \\psi}{\\partial t} = -\\frac{\\hbar^2}{2m} \\nabla^2 \\psi + V \\psi\niℏ∂t∂ψ​=−2mℏ2​∇2ψ+Vψ\n"},{"title":"个人博客网站搭建","url":"/2025/07/01/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/","content":"\n 必要环境安装\n git\nsudo apt install git\n一般问题不大\n npm\n\nnpm (Node Package Manager)是一个用于 JavaScript和 Node.js的包管理器。它不仅是 Node.js的默认包管理器，还提供了发布和共享代码、管理依赖、版本控制等功能。npm允许开发者从全球的代码库中获取并安装 Node.js模块，这些模块可以用于构建应用程序、工具和包等。\n简单来说，npm就像一个巨大的软件仓库，里面存放了各种 JavaScript和 Node.js的模块（也叫包）。\n\nsudo apt-get install npm\n\nChatGPT建议使用nvm安装Node.js + npm（更干净灵活）。\n Node.js\n不想让系统包干扰，可以用 nvm（Node Version Manager）来安装 Node.js + npm：\n# 安装 nvmcurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash# 激活 nvm（或者重启终端）export NVM_DIR=&quot;$HOME/.nvm&quot;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot;# 安装 Node.js 最新 LTS 版本（或指定版本）nvm install --lts# 检查版本node -vnpm -v\n如果报以下错误：\n\n说明当前系统的 GLIBC版本太低，而你安装的 Node.js二进制文件依赖于更高版本的 GLIBC（2.28）。\n\n🧠 原因分析\nUbuntu 18.04 的默认 glibc 是 2.27。\nNode.js 官方预构建二进制从某个版本开始依赖 glibc &gt;= 2.28（通常从 Node.js 18 或更高版本开始）。\n所以如果在 Ubuntu 18.04 或老系统上安装了较新的 Node.js，就会出这个错。\n\n\n\n彻底删除旧版本 Node.js，以防系统中残留了之前的 node安装路径或链接。\n执行以下命令清理旧的 node/npm：\nsudo apt purge -y nodejs npmsudo rm -rf /usr/local/bin/node /usr/local/bin/npmsudo rm -rf /usr/bin/node /usr/bin/npmsudo rm -rf ~/.npm ~/.nvm ~/.node*hash -r\n\n\n安装 nvm（Node Version Manager）\n# 下载并安装 nvmcurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash# 加载 nvm（也可以重启终端）export NVM_DIR=&quot;$HOME/.nvm&quot;source &quot;$NVM_DIR/nvm.sh&quot;\n\n\n使用 nvm安装 Node.js 16\nnvm install 16nvm use 16nvm alias default 16\n\n\n验证：\nnode -v      # 应输出 v16.x.xnpm -v       # 应输出 8.x.x\n\n\n\n 🚀 总结\n使用 nvm 方式安装 Node.js是：\n\n✅ 最兼容的\n✅ 不依赖系统 glibc\n✅ 不需要 root 权限\n✅ 可随时切换 Node.js 版本\n\n nvm使用\n\n\n查看已安装的 Node.js版本\nnvm ls\n\n\n\n版本切换\n# 切换使用 Node.js 14nvm use 14# 切回 Node.js 16nvm use 16\n\n\n设置默认版本（打开终端自动使用）\n# 以后打开终端就会自动使用 Node.js 16。nvm alias default 16\n\n\n如果没有安装目标版本\n# 先安装再切换：nvm install 14nvm use 14\n\n\n 基于Hexo框架搭建\n\nHexo项目中，源代码（markdown、主题等） 和生成后的网页是分开的\n\n一个仓库存放 Hexo源码（如 hexo-iNog-blog）&lt;font color=gree&gt;（可选）&lt;/font&gt;\n一个仓库存放部署页面（如 i-nog.github.io）\n\n\n\n\n下载 Hexo\nnpm install hexo-cli -g\n\n安装 hexo插件# 按需选择安装npm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-tag --savenpm install hexo-server --savenpm install hexo-deployer-git --save # 本人只安装这个npm install hexo-deployer-heroku --savenpm install hexo-deployer-rsync --savenpm install hexo-deployer-openshift --savenpm install hexo-renderer-marked --savenpm install hexo-renderer-stylus --savenpm install hexo-generator-feed --savenpm install hexo-generator-sitemap --save\n\n\n\n\n创建框架\n(base) lxp@lxp-os:~/projects$ mkdir hexo-iNog-blog(base) lxp@lxp-os:~/projects$ cd hexo-iNog-blog/(base) lxp@lxp-os:~/projects/hexo-iNog-blog$ hexo initINFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.gitINFO  Install dependenciesINFO  Start blogging with Hexo!(base) lxp@lxp-os:~/projects/hexo-iNog-blog$ ls_config.landscape.yml  _config.yml  node_modules  package.json  package-lock.json  scaffolds  source  themes\nhexo的文件结构：\n\npublic最终所见网页的所有内容\nnode_modules插件以及 hexo所需 node.js模块\n_config.yml站点配置文件，设定一些公开信息等\npackage.json应用程序信息，配置 hexo运行所需 js包\nscaffolds模板文件夹，新建文章，会默认包含对应模板内容\nthemes存放主题文件，hexo根据主题生成静态网页（速度贼快）\nsource用于存放用户资源（除 posts文件夹，其余命名方式为 “ + 文件名”的文件被忽略）\n\n注意：hexo-iNog-blog/文件夹无需配置git仓库，除非个人想进行版本管理，方便长期开发。\n\n\n下载自己喜欢的主题\n在Themes查找自己喜欢的主题，比如Keep主题\n# 在 hexo-iNog-blog/ 下git clone https://github.com/XPoet/hexo-theme-keep themes/keep# 或git clone https://github.com/chen-yingfa/hexo-theme-fengye.git themes/fengye# 或git clone https://github.com/fluid-dev/hexo-theme-fluid.git themes/fluid\n\n\n配置主题\n在 Hexo配置文件 _config.yml中将 theme设置为 keep。\n\n\n\n自定义主题内容\n需要修改 themes/keep/_config.yml文件\n\n\n\n本地预览\nhexo clean //执行此命令后继续下一条hexo g // 生成博客目录，hexo generate 的缩写hexo s // 本地预览，hexo server 的缩写\n\n\n\n 创建及配置Gitbub Pages\n\n\n&lt;font color=red&gt;创建同用户名仓库&lt;/font&gt;，且是公共(Public)仓库\n\nGitHub Pages只支持公共仓库免费部署。如果仓库是私有的：\n\n地址不会生成；\n或者会提示升级为付费账户。\n\n\n\n设置仓库 Pages信息\n\n\n\n本地关联 github，需配置 _config.yml文件中将 deploy\n&lt;font color=gree&gt;注意，是用户名.github.io那个仓库 。&lt;/font&gt;\n\n同时还需要配置 git参数，如下：\ngit config --global user.name &quot;用户名&quot;git config --global user.email &quot;******@gmail.com&quot;\n注意：是要配置全局的name和email。\n\n\n上传\n# 在自己的博客目录下，比如 hexo-iNog-blog/ 目录下# 清除缓存hexo clean# 生成hexo目录hexo generate# 可以先本地预览hexo server# 部署到远程仓库hexo deploy # 缩写 hexo s，如果失败，需要先安装 npm install hexo-deployer-git --save\ndeploy过程会生成.deploy_git/文件夹（内容同public/目录），自动关联到用户名.github.io仓库，将文件夹的内容推送到该仓库。\n\n\n❌ 不推荐直接把 Hexo项目源码上传到 .github.io仓库\n因为 GitHub Pages无法直接解析 source/里的 .md文件，它只支持静态 HTML页面。\n\n\n 与JopLin笔记本配合（无很好适配）\nJoplin Publisher插件教程\n\n配置仓库的读写权限\n\n\n\n结果：\n\n\n 参考文献\nUbuntu20.04 +GitHub+Hexo 0基础0成本免费配置个人博客\n快速搭建个人博客 —— 保姆级教程\n","categories":["博客搭建"]}]